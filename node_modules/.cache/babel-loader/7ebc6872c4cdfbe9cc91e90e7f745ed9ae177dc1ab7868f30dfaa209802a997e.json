{"ast":null,"code":"import axios from \"axios\";\nimport Swal from \"sweetalert2\";\nexport default {\n  data: () => ({\n    progress: false,\n    video: {},\n    category: [],\n    Toast: Swal.mixin({\n      toast: true,\n      position: 'top-end',\n      showConfirmButton: false,\n      timer: 1500,\n      timerProgressBar: true,\n      didOpen: toast => {\n        toast.addEventListener('mouseenter', Swal.stopTimer);\n        toast.addEventListener('mouseleave', Swal.resumeTimer);\n      }\n    })\n  }),\n  created() {\n    this.getCategory();\n  },\n  methods: {\n    async getCategory() {\n      await axios.get('/sport-categories/').then(res => {\n        this.category = res.data.data.filter(object => object.section == 'Video');\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    async saveInfo() {\n      let formData = new FormData();\n      formData.append('nameTm', this.video.nameTm);\n      formData.append('nameRu', this.video.nameRu);\n      formData.append('textTm', this.video.textTm);\n      formData.append('textRu', this.video.textRu);\n      formData.append('categoryId', this.video.category.id);\n      formData.append('photo', this.video.photo);\n      formData.append('video', this.video.video);\n      await axios.post('/videos/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(() => {\n        this.Toast.fire({\n          icon: 'success',\n          title: 'Successfully saved'\n        });\n        this.video = {};\n        this.$emit('close-nav-drawer');\n      }).catch(err => {\n        this.Toast.fire({\n          icon: 'error',\n          title: 'Something went wrong'\n        });\n        console.log(err);\n        this.$emit('close-nav-drawer');\n      });\n    }\n  },\n  computed: {},\n  components: {}\n};","map":{"version":3,"names":["axios","Swal","data","progress","video","category","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","created","getCategory","methods","get","then","res","filter","object","section","catch","err","console","log","saveInfo","formData","FormData","append","nameTm","nameRu","textTm","textRu","id","photo","post","headers","fire","icon","title","$emit","computed","components"],"sources":["src/components/example/Drawers/VideoDrawer.vue"],"sourcesContent":["<template>\r\n  <div>\r\n\r\n    <v-text-field\r\n      outlined\r\n      dense\r\n      label=\"nameTm\"\r\n      v-model=\"video.nameTm\"\r\n      class=\"mt-1\"\r\n    />\r\n    <v-text-field\r\n        outlined\r\n        dense\r\n        label=\"nameRu\"\r\n        v-model=\"video.nameRu\"\r\n    />\r\n    <v-textarea\r\n      outlined\r\n      label=\"textTm\"\r\n      v-model=\"video.textTm\"\r\n      dense\r\n    />\r\n    <v-textarea\r\n        outlined\r\n        label=\"textRu\"\r\n        v-model=\"video.textRu\"\r\n        dense\r\n    />\r\n    <v-combobox\r\n        dense\r\n        outlined\r\n        label=\"category\"\r\n        :items=\"category\"\r\n        v-model=\"video.category\"\r\n        item-text=\"nameTm\"\r\n    />\r\n    <v-file-input\r\n        v-model=\"video.photo\"\r\n        color=\"deep-purple accent-4\"\r\n        label=\"photo\"\r\n        prepend-icon=\"mdi-camera\"\r\n        outlined\r\n        hide-details\r\n        dense\r\n        class=\"mb-6\"\r\n    />\r\n    <v-file-input\r\n        v-model=\"video.video\"\r\n        color=\"deep-purple accent-4\"\r\n        label=\"video\"\r\n        prepend-icon=\"mdi-video\"\r\n        outlined\r\n        hide-details\r\n        dense\r\n        class=\"mb-3\"\r\n    />\r\n    <v-btn outlined width=\"100%\" class=\"mt-3\" @click=\"saveInfo\">Save</v-btn>\r\n      <v-progress-circular\r\n          v-if=\"progress\"\r\n          :size=\"50\"\r\n          color=\"primary\"\r\n          indeterminate\r\n      />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport default {\r\n  data: () => ({\r\n    progress: false,\r\n    video: {},\r\n    category: [],\r\n    Toast: Swal.mixin({\r\n      toast: true,\r\n      position: 'top-end',\r\n      showConfirmButton: false,\r\n      timer: 1500,\r\n      timerProgressBar: true,\r\n      didOpen: (toast) => {\r\n        toast.addEventListener('mouseenter', Swal.stopTimer)\r\n        toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n      },\r\n    }),\r\n  }),\r\n  created() {\r\n    this.getCategory()\r\n  },\r\n  methods: {\r\n    async getCategory() {\r\n      await axios.get('/sport-categories/')\r\n          .then((res) => {\r\n            this.category = res.data.data\r\n                .filter((object) => object.section == 'Video')\r\n          })\r\n          .catch((err) => {\r\n            console.log(err)\r\n          })\r\n    },\r\n    async saveInfo() {\r\n\r\n      let formData = new FormData()\r\n\r\n      formData.append('nameTm', this.video.nameTm)\r\n      formData.append('nameRu', this.video.nameRu)\r\n      formData.append('textTm', this.video.textTm)\r\n      formData.append('textRu', this.video.textRu)\r\n      formData.append('categoryId', this.video.category.id)\r\n      formData.append('photo', this.video.photo)\r\n      formData.append('video', this.video.video)\r\n\r\n      await axios.post('/videos/', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      })\r\n          .then(() => {\r\n            this.Toast.fire({\r\n              icon:'success',\r\n              title: 'Successfully saved'\r\n            })\r\n            this.video = {}\r\n            this.$emit('close-nav-drawer')\r\n          })\r\n          .catch((err) => {\r\n            this.Toast.fire({\r\n              icon:'error',\r\n              title: 'Something went wrong'\r\n            })\r\n            console.log(err)\r\n            this.$emit('close-nav-drawer')\r\n          })\r\n    }\r\n  },\r\n  computed: {\r\n\r\n  },\r\n  components: {\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>"],"mappings":"AAmEA,OAAAA,KAAA;AACA,OAAAC,IAAA;AAEA;EACAC,IAAA,EAAAA,CAAA;IACAC,QAAA;IACAC,KAAA;IACAC,QAAA;IACAC,KAAA,EAAAL,IAAA,CAAAM,KAAA;MACAC,KAAA;MACAC,QAAA;MACAC,iBAAA;MACAC,KAAA;MACAC,gBAAA;MACAC,OAAA,EAAAL,KAAA;QACAA,KAAA,CAAAM,gBAAA,eAAAb,IAAA,CAAAc,SAAA;QACAP,KAAA,CAAAM,gBAAA,eAAAb,IAAA,CAAAe,WAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACA,MAAAD,YAAA;MACA,MAAAlB,KAAA,CAAAoB,GAAA,uBACAC,IAAA,CAAAC,GAAA;QACA,KAAAjB,QAAA,GAAAiB,GAAA,CAAApB,IAAA,CAAAA,IAAA,CACAqB,MAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAC,OAAA;MACA,GACAC,KAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MACA;IACA;IACA,MAAAG,SAAA;MAEA,IAAAC,QAAA,OAAAC,QAAA;MAEAD,QAAA,CAAAE,MAAA,gBAAA7B,KAAA,CAAA8B,MAAA;MACAH,QAAA,CAAAE,MAAA,gBAAA7B,KAAA,CAAA+B,MAAA;MACAJ,QAAA,CAAAE,MAAA,gBAAA7B,KAAA,CAAAgC,MAAA;MACAL,QAAA,CAAAE,MAAA,gBAAA7B,KAAA,CAAAiC,MAAA;MACAN,QAAA,CAAAE,MAAA,oBAAA7B,KAAA,CAAAC,QAAA,CAAAiC,EAAA;MACAP,QAAA,CAAAE,MAAA,eAAA7B,KAAA,CAAAmC,KAAA;MACAR,QAAA,CAAAE,MAAA,eAAA7B,KAAA,CAAAA,KAAA;MAEA,MAAAJ,KAAA,CAAAwC,IAAA,aAAAT,QAAA;QACAU,OAAA;UACA;QACA;MACA,GACApB,IAAA;QACA,KAAAf,KAAA,CAAAoC,IAAA;UACAC,IAAA;UACAC,KAAA;QACA;QACA,KAAAxC,KAAA;QACA,KAAAyC,KAAA;MACA,GACAnB,KAAA,CAAAC,GAAA;QACA,KAAArB,KAAA,CAAAoC,IAAA;UACAC,IAAA;UACAC,KAAA;QACA;QACAhB,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACA,KAAAkB,KAAA;MACA;IACA;EACA;EACAC,QAAA,GAEA;EACAC,UAAA,GACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}